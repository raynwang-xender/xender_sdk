cn.xender.core.ap.BaseCreateApWorker$ApStatusReceiver
cn.xender.core.ap.BaseCreateApWorker$State: cn.xender.core.ap.BaseCreateApWorker$State[] values()
cn.xender.core.ap.BaseCreateApWorker$State: cn.xender.core.ap.BaseCreateApWorker$State valueOf(java.lang.String)
cn.xender.core.ap.CoreApManager
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.ScanApWorker scanApWorker
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.JoinApWorker joinApWorker
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.ICreateApWorker createApWorker
cn.xender.core.ap.CoreApManager: android.content.Context applicationContext
cn.xender.core.ap.CoreApManager: cn.xender.core.HttpServerStart httpServerStart
cn.xender.core.ap.CoreApManager: int DEFAULT_CREATE_TIMEOUT
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.CoreApManager instance
cn.xender.core.ap.CoreApManager: CoreApManager()
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.CoreApManager getInstance()
cn.xender.core.ap.CoreApManager: void initApplicationContext(android.content.Context)
cn.xender.core.ap.CoreApManager: void setSSIDFilterForRestore(cn.xender.core.ap.SSIDFilter)
cn.xender.core.ap.CoreApManager: void createAp(int,cn.xender.core.ap.CoreCreateApCallback)
cn.xender.core.ap.CoreApManager: void createAp(java.lang.String,java.lang.String,long,int,cn.xender.core.ap.CoreCreateApCallback)
cn.xender.core.ap.CoreApManager: int getCreateRequestCode()
cn.xender.core.ap.CoreApManager: void retryCreateAp(java.lang.String,java.lang.String,long,int,cn.xender.core.ap.CoreCreateApCallback)
cn.xender.core.ap.CoreApManager: void shutdownAp()
cn.xender.core.ap.CoreApManager: boolean isApEnabled()
cn.xender.core.ap.CoreApManager: void createFailed()
cn.xender.core.ap.CoreApManager: java.lang.String getApName()
cn.xender.core.ap.CoreApManager: java.lang.String getApPassword()
cn.xender.core.ap.CoreApManager: void startScanAp(cn.xender.core.ap.SSIDFilter,cn.xender.core.ap.SSIDDecoder,long,cn.xender.core.ap.CoreScanApCallback,int)
cn.xender.core.ap.CoreApManager: void stopScanAp()
cn.xender.core.ap.CoreApManager: void joinAp(cn.xender.core.ap.ScanResultItem,java.lang.String,java.lang.String,long,cn.xender.core.ap.CoreJoinApCallback)
cn.xender.core.ap.CoreApManager: void cancelDiscoveryBluetooth()
cn.xender.core.ap.CoreApManager: void checkContext()
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.ICreateApWorker getCreateApWorker()
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.ScanApWorker getScanApWorker()
cn.xender.core.ap.CoreApManager: cn.xender.core.ap.JoinApWorker getJoinApWorker()
cn.xender.core.ap.CoreApManager: cn.xender.core.HttpServerStart getHttpServerStart()
cn.xender.core.ap.CoreApManager: void <clinit>()
cn.xender.core.ap.CoreCreateApCallback
cn.xender.core.ap.CoreCreateApCallback: void callback(cn.xender.core.ap.CreateApEvent)
cn.xender.core.ap.CreateApEvent
cn.xender.core.ap.CreateApEvent: int CREATE_ERROR
cn.xender.core.ap.CreateApEvent: int OFF
cn.xender.core.ap.CreateApEvent: int SAVED_25_CONFIG
cn.xender.core.ap.CreateApEvent: int AP_ENABLED_25
cn.xender.core.ap.CreateApEvent: int CREATE_OK_BUT_NO_IP_ON25
cn.xender.core.ap.CreateApEvent: int CREATE_OK
cn.xender.core.ap.CreateApEvent: int type
cn.xender.core.ap.CreateApEvent: java.lang.String apIp
cn.xender.core.ap.CreateApEvent: java.lang.String ssid
cn.xender.core.ap.CreateApEvent: int requestCode
cn.xender.core.ap.CreateApEvent: java.lang.String url
cn.xender.core.ap.CreateApEvent: java.lang.String password
cn.xender.core.ap.CreateApEvent: CreateApEvent(int,int)
cn.xender.core.ap.CreateApEvent: CreateApEvent(int,java.lang.String,java.lang.String,int,java.lang.String)
cn.xender.core.ap.CreateApEvent: CreateApEvent(int,java.lang.String,int)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent errorEvent(int)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent okEvent(java.lang.String,java.lang.String,int,java.lang.String)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent offEvent(int)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent save25ConfigEvent(int)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent apEnabled25Event(int)
cn.xender.core.ap.CreateApEvent: cn.xender.core.ap.CreateApEvent okButNoIpOn25(int)
cn.xender.core.ap.CreateApEvent: int getRequestCode()
cn.xender.core.ap.CreateApEvent: java.lang.String getUrl()
cn.xender.core.ap.CreateApEvent: boolean isOk()
cn.xender.core.ap.CreateApEvent: boolean isOff()
cn.xender.core.ap.CreateApEvent: boolean isError()
cn.xender.core.ap.CreateApEvent: boolean isNeedUserManualOpen()
cn.xender.core.ap.CreateApEvent: boolean isManualOpenSuccess()
cn.xender.core.ap.CreateApEvent: boolean isOpendButWeCannotUseAndNeedRetry()
cn.xender.core.ap.JoinApWorker$NetWorkStatusReceiver
cn.xender.core.ap.JoinApWorker$SupplicantStateReceiver
cn.xender.core.ap.service.OAPService
cn.xender.core.ap.service.OAPService: int MSG_OPEN_AP
cn.xender.core.ap.service.OAPService: int MSG_GET_AP_INFO
cn.xender.core.ap.service.OAPService: java.lang.String ssid
cn.xender.core.ap.service.OAPService: java.lang.String password
cn.xender.core.ap.service.OAPService: boolean openFailed
cn.xender.core.ap.service.OAPService: android.os.Messenger mMessenger
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager$LocalOnlyHotspotReservation reservation
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager$LocalOnlyHotspotCallback callback
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager wifiManager
cn.xender.core.ap.service.OAPService: cn.xender.core.ap.utils.WifiApManager wifiApManager
cn.xender.core.ap.service.OAPService: OAPService()
cn.xender.core.ap.service.OAPService: void replyToClientMessage(android.os.Message,android.os.Bundle)
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager getWifiManager()
cn.xender.core.ap.service.OAPService: cn.xender.core.ap.utils.WifiApManager getWifiApManager()
cn.xender.core.ap.service.OAPService: void onCreate()
cn.xender.core.ap.service.OAPService: android.os.IBinder onBind(android.content.Intent)
cn.xender.core.ap.service.OAPService: boolean onUnbind(android.content.Intent)
cn.xender.core.ap.service.OAPService: void onDestroy()
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager$LocalOnlyHotspotCallback access$000(cn.xender.core.ap.service.OAPService)
cn.xender.core.ap.service.OAPService: void access$100(cn.xender.core.ap.service.OAPService,android.os.Message,android.os.Bundle)
cn.xender.core.ap.service.OAPService: java.lang.String access$200(cn.xender.core.ap.service.OAPService)
cn.xender.core.ap.service.OAPService: java.lang.String access$300(cn.xender.core.ap.service.OAPService)
cn.xender.core.ap.service.OAPService: boolean access$400(cn.xender.core.ap.service.OAPService)
cn.xender.core.ap.service.OAPService: android.net.wifi.WifiManager$LocalOnlyHotspotReservation access$602(cn.xender.core.ap.service.OAPService,android.net.wifi.WifiManager$LocalOnlyHotspotReservation)
cn.xender.core.ap.service.OAPService: java.lang.String access$302(cn.xender.core.ap.service.OAPService,java.lang.String)
cn.xender.core.ap.service.OAPService: java.lang.String access$202(cn.xender.core.ap.service.OAPService,java.lang.String)
cn.xender.core.ap.service.OAPService: boolean access$402(cn.xender.core.ap.service.OAPService,boolean)
cn.xender.core.ap.utils.WIFI_AP_STATE: cn.xender.core.ap.utils.WIFI_AP_STATE[] values()
cn.xender.core.ap.utils.WIFI_AP_STATE: cn.xender.core.ap.utils.WIFI_AP_STATE valueOf(java.lang.String)
cn.xender.core.log.Logger
cn.xender.core.log.Logger: boolean r
cn.xender.core.log.Logger: Logger()
cn.xender.core.log.Logger: void c(java.lang.String,java.lang.String)
cn.xender.core.log.Logger: void ce(java.lang.String,java.lang.String)
cn.xender.core.log.Logger: void d(java.lang.String,java.lang.String)
cn.xender.core.log.Logger: void i(java.lang.String,java.lang.String)
cn.xender.core.log.Logger: void e(java.lang.String,java.lang.String)
cn.xender.core.log.Logger: void d(java.lang.String,java.lang.String,java.lang.Throwable)
cn.xender.core.log.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)
cn.xender.core.log.Logger: void <clinit>()
cn.xender.core.server.NanoHTTPD$Method: cn.xender.core.server.NanoHTTPD$Method[] values()
cn.xender.core.server.NanoHTTPD$Method: cn.xender.core.server.NanoHTTPD$Method valueOf(java.lang.String)
cn.xender.core.server.NanoHTTPD$Response$Status: cn.xender.core.server.NanoHTTPD$Response$Status[] values()
cn.xender.core.server.NanoHTTPD$Response$Status: cn.xender.core.server.NanoHTTPD$Response$Status valueOf(java.lang.String)
cn.xender.core.server.service.HttpServerService
cn.xender.core.server.service.HttpServerService: java.lang.String TAG
cn.xender.core.server.service.HttpServerService: cn.xender.core.server.EmbbedWebServer server
cn.xender.core.server.service.HttpServerService: android.os.IBinder binder
cn.xender.core.server.service.HttpServerService: HttpServerService()
cn.xender.core.server.service.HttpServerService: int onStartCommand(android.content.Intent,int,int)
cn.xender.core.server.service.HttpServerService: void initState()
cn.xender.core.server.service.HttpServerService: android.os.IBinder onBind(android.content.Intent)
cn.xender.core.server.service.HttpServerService: void onCreate()
cn.xender.core.server.service.HttpServerService: void onDestroy()
cn.xender.core.server.service.HttpServerService: void onLowMemory()
cn.xender.core.server.service.HttpServerService: void onTrimMemory(int)
cn.xender.core.server.service.HttpServerService: cn.xender.core.server.EmbbedWebServer getServer()
cn.xender.core.server.service.HttpServerService: void startServer()
cn.xender.core.server.service.HttpServerService: void stopServer()
cn.xender.core.server.utils.ActionListener
cn.xender.core.server.utils.ActionListener: void someoneOnline()
cn.xender.core.server.utils.ActionListener: void someoneOffline()
cn.xender.core.server.utils.ActionListener: void transferSuccess()
cn.xender.core.server.utils.ActionListener: void transferFailure()
cn.xender.core.server.utils.ActionProtocol
cn.xender.core.server.utils.ActionProtocol: java.lang.String FRIENDS_ONLINE_INFO_ABOUT_ACTION
cn.xender.core.server.utils.ActionProtocol: java.lang.String FRIENDS_OFFLINE_INFO_ABOUT_ACTION
cn.xender.core.server.utils.ActionProtocol: java.lang.String TRANSFER_SUCCESS_ACTION
cn.xender.core.server.utils.ActionProtocol: java.lang.String TRANSFER_FAILURE_ACTION
cn.xender.core.server.utils.ActionProtocol: cn.xender.core.server.utils.ActionListener listener
cn.xender.core.server.utils.ActionProtocol: android.content.BroadcastReceiver receiver
cn.xender.core.server.utils.ActionProtocol: ActionProtocol()
cn.xender.core.server.utils.ActionProtocol: void sendOnlineAction(android.content.Context)
cn.xender.core.server.utils.ActionProtocol: void sendOfflineAction(android.content.Context)
cn.xender.core.server.utils.ActionProtocol: void sendTransferSuccessAction(android.content.Context)
cn.xender.core.server.utils.ActionProtocol: void sendTransferFailureAction(android.content.Context)
cn.xender.core.server.utils.ActionProtocol: void setActionListener(cn.xender.core.server.utils.ActionListener)
cn.xender.core.server.utils.ActionProtocol: void register(android.app.Activity)
cn.xender.core.server.utils.ActionProtocol: void unregister(android.app.Activity)
cn.xender.core.server.utils.ActionProtocol: void initReceiver()
cn.xender.core.server.utils.ActionProtocol: cn.xender.core.server.utils.ActionListener access$000(cn.xender.core.server.utils.ActionProtocol)
cn.xender.core.server.utils.ActionProtocol$1
cn.xender.tcore.R
cn.xender.tcore.R$string
