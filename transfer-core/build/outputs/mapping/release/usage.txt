cn.xender.core.DevConfig
cn.xender.core.SDKSpf:
    6:6:public SDKSpf()
cn.xender.core.ap.AndroidOCreateApWorker:
    private static final int REPEAT_GET_AP_INFO
cn.xender.core.ap.ICoreApManager
cn.xender.core.ap.ICreateApWorker:
    public static final java.lang.String TAG
cn.xender.core.ap.JoinApEvent:
    public static final int JOIN
    public static final int EXIT
    public static final int JOIN_LIMIT
    14:27:public JoinApEvent(boolean,boolean,int,boolean)
    30:30:public boolean isSuccess()
    34:34:public boolean isWrongPassword()
    42:42:public int getType()
    46:46:public boolean isNearbyConnection()
cn.xender.core.ap.JoinApWorker:
    private static final java.lang.String TAG
cn.xender.core.ap.JoinApWorker$NetWorkStatusReceiver:
    public static final java.lang.String NULL_SSID
cn.xender.core.ap.ScanApEvent:
    private static final java.lang.String TAG
    public static final int REQUEST_CODE_SCAN_COMMON_SSID
    public static final int RQQUEST_CODE_SANC_ASSIGNED_SSID
    21:21:public boolean isHasAndroidOAp()
    25:25:public java.util.List getAplist()
    29:29:public boolean isScanStoped()
    50:50:public int getRequestCode()
cn.xender.core.ap.ScanApWorker:
    private static final java.lang.String TAG
cn.xender.core.ap.ScanResultItem:
    private java.lang.String qr_scan_action_type
    private java.lang.String password
    public java.lang.String sessionKey
    15:15:public java.lang.String getPassword()
    19:20:public void setPassword(java.lang.String)
    25:25:public java.lang.String getQr_scan_action_type()
    29:30:public void setQr_scan_action_type(java.lang.String)
    5:43:public ScanResultItem(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
    46:46:public java.lang.String getKeyMgmt()
    54:54:public boolean isClickable()
    66:66:public java.lang.String getSsid_nickname()
    82:82:public java.lang.String getProfix()
cn.xender.core.ap.utils.AndroidOApName:
    private static final java.lang.String ANDROID_O_AP_NAME_FIX
    5:5:public AndroidOApName()
cn.xender.core.ap.utils.BluetoothUtil:
    private static final java.lang.String TAG
    12:12:public BluetoothUtil()
    20:28:public static void closeBluetoothIfOpened(android.content.Context)
    64:64:public static android.bluetooth.BluetoothAdapter getDefaultBluetoothAdapter()
cn.xender.core.ap.utils.ConnectWifiUtil:
    private static final java.lang.String TAG
    197:206:private static android.net.Network getNetworkByNetworkId(int)
    570:587:private static void setProxy(java.lang.Object)
    654:675:public static void unbindNetwork(android.content.Context)
cn.xender.core.ap.utils.FilterManager:
    3:3:public FilterManager()
    21:21:public static cn.xender.core.ap.SSIDFilter getSSIDFilter()
cn.xender.core.ap.utils.UserApConfigurationUtil:
    private static final java.lang.String TAG
    19:19:public UserApConfigurationUtil()
cn.xender.core.ap.utils.WifiAPUtil:
    public static final java.lang.String TAG
    22:22:public WifiAPUtil()
    28:34:public static java.lang.String getApIpByLocalIp(java.lang.String)
    123:131:public static boolean isMobileDataConnected(android.content.Context)
    248:259:public static boolean isNetAvailable(android.content.Context)
    292:328:public static java.lang.String getMacAddress()
cn.xender.core.ap.utils.WifiApFieldUtils:
    7:7:private WifiApFieldUtils()
cn.xender.core.ap.utils.WifiApManager:
    public static final java.lang.String TAG
    private static final java.lang.String METHOD_GET_WIFI_AP_STATE
    private static final java.lang.String METHOD_SET_WIFI_AP_ENABLED
    private static final java.lang.String METHOD_GET_WIFI_AP_CONFIG
    private static final java.lang.String METHOD_IS_WIFI_AP_ENABLED
    216:219:public java.lang.String getWifiApIP()
    229:250:private java.lang.String getLocalIp()
    254:264:private boolean isReservedAddr(java.net.InetAddress)
    271:284:public boolean isWifiConnected()
cn.xender.core.server.Base:
    public static final java.lang.String EX
    public static final java.lang.String TAG
    public static final java.lang.String CONTENT_TYPE_JSON
    public static final java.lang.String CONTENT_TYPE_TEXT_JSON
    public static final java.lang.String CONTENT_TYPE_STREAM
    public static final java.lang.String CONTENT_TYPE_STREAM_APP
    public abstract cn.xender.core.server.NanoHTTPD$Response doResponse(java.util.Map,cn.xender.core.server.NanoHTTPD$IHTTPSession,java.lang.String)
cn.xender.core.server.ClientManager:
    private java.lang.String session
    54:58:public void clearNoNeedSync()
    71:77:public synchronized java.lang.String[] getClientIps()
    81:81:public synchronized java.util.List getOtherClients()
cn.xender.core.server.ConnectRequestData:
    36:36:public java.lang.String getNickname()
    60:60:public java.lang.String getDevice_type()
cn.xender.core.server.DownloadMe:
    public static final java.lang.String URL_PATTERN
cn.xender.core.server.DownloadSharedFile:
    public static final java.lang.String URL_PATTERN
cn.xender.core.server.EmbbedWebServer:
    public static final java.lang.String MIME_DEFAULT_BINARY
    73:105:public EmbbedWebServer(java.lang.String,int,java.util.List,boolean)
    152:165:public static void main(java.lang.String[])
    258:263:private java.lang.String getMimeTypeForFile(java.lang.String)
cn.xender.core.server.MyFileRangeResponse:
    59:72:private boolean needDel(java.io.File)
cn.xender.core.server.MyPushbackInputStream:
    13:14:public MyPushbackInputStream(java.io.InputStream)
cn.xender.core.server.NanoHTTPD:
    public static final int SOCKET_READ_TIMEOUT
    public static final java.lang.String MIME_PLAINTEXT
    public static final java.lang.String MIME_HTML
    private static final java.lang.String QUERY_STRING_PARAMETER
cn.xender.core.server.NanoHTTPD$Cookie:
    1399:1403:public NanoHTTPD$Cookie(java.lang.String,java.lang.String,java.lang.String)
    1411:1416:public static java.lang.String getHTTPTime(int)
cn.xender.core.server.NanoHTTPD$CookieHandler:
    1457:1457:public java.lang.String read(java.lang.String)
    1468:1469:public void set(java.lang.String,java.lang.String,int)
    1472:1473:public void set(cn.xender.core.server.NanoHTTPD$Cookie)
    1482:1483:public void delete(java.lang.String)
cn.xender.core.server.NanoHTTPD$DefaultTempFile:
    524:524:public java.io.OutputStream open()
cn.xender.core.server.NanoHTTPD$HTTPSession:
    public static final int BUFSIZE
    1387:1387:public final java.io.InputStream getInputStream()
    1392:1392:public cn.xender.core.server.NanoHTTPD$CookieHandler getCookies()
cn.xender.core.server.NanoHTTPD$IHTTPSession:
    public abstract void execute()
    public abstract java.io.InputStream getInputStream()
    public abstract cn.xender.core.server.NanoHTTPD$CookieHandler getCookies()
cn.xender.core.server.NanoHTTPD$Response:
    559:604:public NanoHTTPD$Response(cn.xender.core.server.NanoHTTPD$Response$IStatus,java.lang.String,byte[])
    721:722:public void setStatus(cn.xender.core.server.NanoHTTPD$Response$Status)
    729:730:public void setData(java.io.InputStream)
    745:746:public void setChunkedTransfer(boolean)
cn.xender.core.server.NanoHTTPD$Response$IStatus:
    public abstract int getRequestStatus()
cn.xender.core.server.NanoHTTPD$Response$Status:
    783:783:public int getRequestStatus()
cn.xender.core.server.NanoHTTPD$TempFile:
    public abstract java.io.OutputStream open()
cn.xender.core.server.NetWorker:
    public static final java.lang.String TAG
    public static final java.lang.String EX
    25:25:public NetWorker()
    31:98:public static java.lang.String getServerDataByPostImage(android.content.Context,java.lang.String,java.lang.String)
    254:285:public static java.lang.String getHasOfferData(java.lang.String)
    290:350:public static java.lang.String postDataToServr(java.lang.String,byte[])
cn.xender.core.server.ServerRunner
cn.xender.core.server.WaitingClientIPOnAP:
    public static final java.lang.String URL_PATTERN
cn.xender.core.server.utils.Encoder:
    7:7:public Encoder()
cn.xender.core.server.utils.Port:
    3:3:public Port()
cn.xender.core.server.utils.ShareMessage:
    53:53:public java.lang.String getCategory()
    57:58:public void setCategory(java.lang.String)
    61:61:public java.lang.String getFile_path()
    65:65:public java.lang.String getRes_name()
    69:69:public long getFile_size()
    73:73:public java.lang.String getIp_addr()
    77:78:public void setIp_addr(java.lang.String)
    81:81:public java.lang.String getSpirit_name()
    85:86:public void setSpirit_name(java.lang.String)
    89:89:public java.lang.String getImei()
    93:94:public void setImei(java.lang.String)
    97:97:public long getCreate_time()
    101:101:public java.lang.String getTaskid()
    105:106:public void setFile_path(java.lang.String)
    109:110:public void setRes_name(java.lang.String)
    113:114:public void setFile_size(long)
    117:118:public void setPackage_name(java.lang.String)
    121:121:public java.lang.String getPackage_name()
    125:126:public void setVersion(int)
    129:130:public void setCreate_time(long)
    133:134:public void setBrand(java.lang.String)
    137:138:public void setModel(java.lang.String)
    142:143:public void setTaskid(java.lang.String)
cn.xender.tcore.BuildConfig
