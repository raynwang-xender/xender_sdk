<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.0.1">

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by BluetoothAdapter.isEnabled: android.permission.BLUETOOTH"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            if(adapter != null &amp;&amp; adapter.isEnabled()){"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/BluetoothUtil.java"
            line="22"
            column="35"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by BluetoothAdapter.disable: android.permission.BLUETOOTH_ADMIN"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="                adapter.disable();"
        errorLine2="                ~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/BluetoothUtil.java"
            line="23"
            column="17"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by BluetoothAdapter.isDiscovering: android.permission.BLUETOOTH"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            if(adapter != null &amp;&amp; adapter.isEnabled() &amp;&amp; adapter.isDiscovering()){"
        errorLine2="                                                         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/BluetoothUtil.java"
            line="35"
            column="58"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by BluetoothAdapter.isEnabled: android.permission.BLUETOOTH"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            if(adapter != null &amp;&amp; adapter.isEnabled() &amp;&amp; adapter.isDiscovering()){"
        errorLine2="                                  ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/BluetoothUtil.java"
            line="35"
            column="35"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by BluetoothAdapter.cancelDiscovery: android.permission.BLUETOOTH_ADMIN"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="                adapter.cancelDiscovery();"
        errorLine2="                ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/BluetoothUtil.java"
            line="36"
            column="17"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        if (capabilities.toLowerCase().contains(&quot;wpa-psk&quot;) || capabilities.toLowerCase().contains(&quot;wpa2-psk&quot;)) {"
        errorLine2="                         ~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/WifiAPUtil.java"
            line="281"
            column="26"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 14): android.net.wifi.WifiManager.LocalOnlyHotspotReservation#getWifiConfiguration"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if(!reservation.getWifiConfiguration().allowedKeyManagement.get(WifiConfiguration.KeyMgmt.NONE)){"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/service/OAPService.java"
            line="107"
            column="37"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 14): android.net.wifi.WifiManager.LocalOnlyHotspotReservation#getWifiConfiguration"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        password = reservation.getWifiConfiguration().preSharedKey;"
        errorLine2="                                               ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/service/OAPService.java"
            line="108"
            column="48"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 14): android.net.wifi.WifiManager.LocalOnlyHotspotReservation#getWifiConfiguration"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    if(Logger.r) Logger.d(&quot;OAPService&quot;,&quot;doCreateApOnAndroidO ap on started &quot;+reservation.getWifiConfiguration().preSharedKey);"
        errorLine2="                                                                                                         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/service/OAPService.java"
            line="110"
            column="106"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 14): android.net.wifi.WifiManager.LocalOnlyHotspotReservation#getWifiConfiguration"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                    ssid = reservation.getWifiConfiguration().SSID;"
        errorLine2="                                       ~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/service/OAPService.java"
            line="111"
            column="40"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility &#xA;modes apply. Consider testing and updating this version. &#xA;Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 23"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/build.gradle"
            line="10"
            column="9"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on \&#xA;devices from other vendors, and it may suddenly stop working (if the API is removed) or crash \&#xA;spectacularly (if the API behavior changes, since there are no guarantees for compatibility.)"
        errorLine1="            Object mStaticIpConfiguration = Class"
        errorLine2="                                            ^">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/ConnectWifiUtil.java"
            line="456"
            column="45"/>
    </issue>

    <issue
        id="HardwareIds"
        severity="Warning"
        message="Using `getString` to get device identifiers is not recommended."
        category="Security"
        priority="6"
        summary="Hardware Id Usage"
        explanation="Using these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use `AdvertisingIdClient$Info#getId` and for analytics, use `InstanceId#getId`."
        url="https://developer.android.com/training/articles/user-data-ids.html"
        urls="https://developer.android.com/training/articles/user-data-ids.html"
        errorLine1="        return Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/server/ConnectRequestData.java"
            line="112"
            column="16"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is never &lt; 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if (Build.VERSION.SDK_INT &lt; 11 || TextUtils.isEmpty(static_ip)) {// || !TextUtils.isEmpty(password)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/ConnectWifiUtil.java"
            line="40"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is never &lt; 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        if(Build.VERSION.SDK_INT &lt; 11){"
        errorLine2="           ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/ConnectWifiUtil.java"
            line="347"
            column="12"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder."
        errorLine1="        boolean result = Build.VERSION.SDK_INT > Build.VERSION_CODES.FROYO;"
        errorLine2="                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/utils/WifiApManager.java"
            line="47"
            column="26"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `CoreApManager` which has field `applicationContext` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="    private static CoreApManager instance = new CoreApManager();"
        errorLine2="            ~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/CoreApManager.java"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="HandlerLeak"
        severity="Warning"
        message="This Handler class should be static or leaks might occur (cn.xender.core.ap.service.OAPService.IncomingHandler)"
        category="Performance"
        priority="4"
        summary="Handler reference leaks"
        explanation="Since this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a Looper or MessageQueue for a thread other than the main thread, then there is no issue. If the Handler is using the Looper or MessageQueue of the main thread, you need to fix your Handler declaration, as follows: Declare the Handler as a static class; In the outer class, instantiate a WeakReference to the outer class and pass this object to your Handler when you instantiate the Handler; Make all references to members of the outer class using the WeakReference object."
        errorLine1="    private class IncomingHandler extends Handler {"
        errorLine2="                  ~~~~~~~~~~~~~~~">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/java/cn/xender/core/ap/service/OAPService.java"
            line="36"
            column="19"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.cn_xender_sdk_app_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;cn_xender_sdk_app_name&quot;>Transfer-Core&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/res/values/strings.xml"
            line="2"
            column="13"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src/main/res`: drawable-mdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.&#xA;&#xA;Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/Users/wangshangang/xendertransfersdk/transfer-core/src/main/res"/>
    </issue>

</issues>
